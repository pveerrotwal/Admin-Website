{"ast":null,"code":"import { stars, hasOpenreplayAttribute } from '../utils.js';\nimport { isElementNode } from './guards.js';\nexport var SanitizeLevel;\n(function (SanitizeLevel) {\n  SanitizeLevel[SanitizeLevel[\"Plain\"] = 0] = \"Plain\";\n  SanitizeLevel[SanitizeLevel[\"Obscured\"] = 1] = \"Obscured\";\n  SanitizeLevel[SanitizeLevel[\"Hidden\"] = 2] = \"Hidden\";\n})(SanitizeLevel || (SanitizeLevel = {}));\nexport const stringWiper = input => input.trim().replace(/[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]/g, '█');\nexport default class Sanitizer {\n  constructor(app, options) {\n    this.app = app;\n    this.obscured = new Set();\n    this.hidden = new Set();\n    this.options = Object.assign({\n      obscureTextEmails: true,\n      obscureTextNumbers: false\n    }, options);\n  }\n  handleNode(id, parentID, node) {\n    if (this.obscured.has(parentID) || isElementNode(node) && (hasOpenreplayAttribute(node, 'masked') || hasOpenreplayAttribute(node, 'obscured'))) {\n      this.obscured.add(id);\n    }\n    if (this.hidden.has(parentID) || isElementNode(node) && (hasOpenreplayAttribute(node, 'htmlmasked') || hasOpenreplayAttribute(node, 'hidden'))) {\n      this.hidden.add(id);\n    }\n    if (this.options.domSanitizer !== undefined && isElementNode(node)) {\n      const sanitizeLevel = this.options.domSanitizer(node);\n      if (sanitizeLevel === SanitizeLevel.Obscured) {\n        this.obscured.add(id);\n      }\n      if (sanitizeLevel === SanitizeLevel.Hidden) {\n        this.hidden.add(id);\n      }\n    }\n  }\n  sanitize(id, data) {\n    if (this.obscured.has(id)) {\n      // TODO: is it the best place to put trim() ? Might trimmed spaces be considered in layout in certain cases?\n      return stringWiper(data);\n    }\n    if (this.options.obscureTextNumbers) {\n      data = data.replace(/\\d/g, '0');\n    }\n    if (this.options.obscureTextEmails) {\n      data = data.replace(/^\\w+([.-]\\w+)*@\\w+([.-]\\w+)*\\.\\w{2,3}$/g, email => {\n        const [name, domain] = email.split('@');\n        const [domainName, host] = domain.split('.');\n        return `${stars(name)}@${stars(domainName)}.${stars(host)}`;\n      });\n    }\n    return data;\n  }\n  isObscured(id) {\n    return this.obscured.has(id);\n  }\n  isHidden(id) {\n    return this.hidden.has(id);\n  }\n  getInnerTextSecure(el) {\n    const id = this.app.nodes.getID(el);\n    if (!id) {\n      return '';\n    }\n    return this.sanitize(id, el.innerText);\n  }\n  clear() {\n    this.obscured.clear();\n    this.hidden.clear();\n  }\n}","map":{"version":3,"names":["stars","hasOpenreplayAttribute","isElementNode","SanitizeLevel","stringWiper","input","trim","replace","Sanitizer","constructor","app","options","obscured","Set","hidden","Object","assign","obscureTextEmails","obscureTextNumbers","handleNode","id","parentID","node","has","add","domSanitizer","undefined","sanitizeLevel","Obscured","Hidden","sanitize","data","email","name","domain","split","domainName","host","isObscured","isHidden","getInnerTextSecure","el","nodes","getID","innerText","clear"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/app/sanitizer.js"],"sourcesContent":["import { stars, hasOpenreplayAttribute } from '../utils.js';\nimport { isElementNode } from './guards.js';\nexport var SanitizeLevel;\n(function (SanitizeLevel) {\n    SanitizeLevel[SanitizeLevel[\"Plain\"] = 0] = \"Plain\";\n    SanitizeLevel[SanitizeLevel[\"Obscured\"] = 1] = \"Obscured\";\n    SanitizeLevel[SanitizeLevel[\"Hidden\"] = 2] = \"Hidden\";\n})(SanitizeLevel || (SanitizeLevel = {}));\nexport const stringWiper = (input) => input\n    .trim()\n    .replace(/[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]/g, '█');\nexport default class Sanitizer {\n    constructor(app, options) {\n        this.app = app;\n        this.obscured = new Set();\n        this.hidden = new Set();\n        this.options = Object.assign({\n            obscureTextEmails: true,\n            obscureTextNumbers: false,\n        }, options);\n    }\n    handleNode(id, parentID, node) {\n        if (this.obscured.has(parentID) ||\n            (isElementNode(node) &&\n                (hasOpenreplayAttribute(node, 'masked') || hasOpenreplayAttribute(node, 'obscured')))) {\n            this.obscured.add(id);\n        }\n        if (this.hidden.has(parentID) ||\n            (isElementNode(node) &&\n                (hasOpenreplayAttribute(node, 'htmlmasked') || hasOpenreplayAttribute(node, 'hidden')))) {\n            this.hidden.add(id);\n        }\n        if (this.options.domSanitizer !== undefined && isElementNode(node)) {\n            const sanitizeLevel = this.options.domSanitizer(node);\n            if (sanitizeLevel === SanitizeLevel.Obscured) {\n                this.obscured.add(id);\n            }\n            if (sanitizeLevel === SanitizeLevel.Hidden) {\n                this.hidden.add(id);\n            }\n        }\n    }\n    sanitize(id, data) {\n        if (this.obscured.has(id)) {\n            // TODO: is it the best place to put trim() ? Might trimmed spaces be considered in layout in certain cases?\n            return stringWiper(data);\n        }\n        if (this.options.obscureTextNumbers) {\n            data = data.replace(/\\d/g, '0');\n        }\n        if (this.options.obscureTextEmails) {\n            data = data.replace(/^\\w+([.-]\\w+)*@\\w+([.-]\\w+)*\\.\\w{2,3}$/g, (email) => {\n                const [name, domain] = email.split('@');\n                const [domainName, host] = domain.split('.');\n                return `${stars(name)}@${stars(domainName)}.${stars(host)}`;\n            });\n        }\n        return data;\n    }\n    isObscured(id) {\n        return this.obscured.has(id);\n    }\n    isHidden(id) {\n        return this.hidden.has(id);\n    }\n    getInnerTextSecure(el) {\n        const id = this.app.nodes.getID(el);\n        if (!id) {\n            return '';\n        }\n        return this.sanitize(id, el.innerText);\n    }\n    clear() {\n        this.obscured.clear();\n        this.hidden.clear();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}