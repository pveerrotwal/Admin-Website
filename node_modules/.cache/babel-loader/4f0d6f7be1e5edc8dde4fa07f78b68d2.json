{"ast":null,"code":"import { NetworkRequest } from '../../app/messages.gen.js';\nimport { getTimeOrigin } from '../../utils.js';\nexport var RequestState;\n(function (RequestState) {\n  RequestState[RequestState[\"UNSENT\"] = 0] = \"UNSENT\";\n  RequestState[RequestState[\"OPENED\"] = 1] = \"OPENED\";\n  RequestState[RequestState[\"HEADERS_RECEIVED\"] = 2] = \"HEADERS_RECEIVED\";\n  RequestState[RequestState[\"LOADING\"] = 3] = \"LOADING\";\n  RequestState[RequestState[\"DONE\"] = 4] = \"DONE\";\n})(RequestState || (RequestState = {}));\n/**\n * I know we're not using most of the information from this class\n * but it can be useful in the future if we will decide to display more stuff in our ui\n * */\nexport default class NetworkMessage {\n  constructor(ignoredHeaders = [], setSessionTokenHeader, sanitize) {\n    this.ignoredHeaders = ignoredHeaders;\n    this.setSessionTokenHeader = setSessionTokenHeader;\n    this.sanitize = sanitize;\n    this.id = '';\n    this.name = '';\n    this.method = '';\n    this.url = '';\n    this.status = 0;\n    this.statusText = '';\n    this.cancelState = 0;\n    this.readyState = 0;\n    this.header = {};\n    this.responseType = '';\n    this.requestHeader = {};\n    this.responseSize = 0; // bytes\n    this.responseSizeText = '';\n    this.startTime = 0;\n    this.endTime = 0;\n    this.duration = 0;\n    this.getData = {};\n    this.requestData = null;\n  }\n  getMessage() {\n    const {\n      reqHs,\n      resHs\n    } = this.writeHeaders();\n    const request = {\n      headers: reqHs,\n      body: this.method === 'GET' ? JSON.stringify(this.getData) : this.requestData\n    };\n    const response = {\n      headers: resHs,\n      body: this.response\n    };\n    const messageInfo = this.sanitize({\n      url: this.url,\n      method: this.method,\n      status: this.status,\n      request,\n      response\n    });\n    return NetworkRequest(this.requestType, messageInfo.method, messageInfo.url, JSON.stringify(messageInfo.request), JSON.stringify(messageInfo.response), messageInfo.status, this.startTime + getTimeOrigin(), this.duration, this.responseSize);\n  }\n  writeHeaders() {\n    const reqHs = {};\n    Object.entries(this.requestHeader).forEach(([key, value]) => {\n      if (this.isHeaderIgnored(key)) return;\n      reqHs[key] = value;\n    });\n    this.setSessionTokenHeader((name, value) => {\n      reqHs[name] = value;\n    });\n    const resHs = {};\n    Object.entries(this.header).forEach(([key, value]) => {\n      if (this.isHeaderIgnored(key)) return;\n      resHs[key] = value;\n    });\n    return {\n      reqHs,\n      resHs\n    };\n  }\n  isHeaderIgnored(key) {\n    if (Array.isArray(this.ignoredHeaders)) {\n      return this.ignoredHeaders.map(k => k.toLowerCase()).includes(key.toLowerCase());\n    } else {\n      return this.ignoredHeaders;\n    }\n  }\n}","map":{"version":3,"names":["NetworkRequest","getTimeOrigin","RequestState","NetworkMessage","constructor","ignoredHeaders","setSessionTokenHeader","sanitize","id","name","method","url","status","statusText","cancelState","readyState","header","responseType","requestHeader","responseSize","responseSizeText","startTime","endTime","duration","getData","requestData","getMessage","reqHs","resHs","writeHeaders","request","headers","body","JSON","stringify","response","messageInfo","requestType","Object","entries","forEach","key","value","isHeaderIgnored","Array","isArray","map","k","toLowerCase","includes"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/modules/Network/networkMessage.js"],"sourcesContent":["import { NetworkRequest } from '../../app/messages.gen.js';\nimport { getTimeOrigin } from '../../utils.js';\nexport var RequestState;\n(function (RequestState) {\n    RequestState[RequestState[\"UNSENT\"] = 0] = \"UNSENT\";\n    RequestState[RequestState[\"OPENED\"] = 1] = \"OPENED\";\n    RequestState[RequestState[\"HEADERS_RECEIVED\"] = 2] = \"HEADERS_RECEIVED\";\n    RequestState[RequestState[\"LOADING\"] = 3] = \"LOADING\";\n    RequestState[RequestState[\"DONE\"] = 4] = \"DONE\";\n})(RequestState || (RequestState = {}));\n/**\n * I know we're not using most of the information from this class\n * but it can be useful in the future if we will decide to display more stuff in our ui\n * */\nexport default class NetworkMessage {\n    constructor(ignoredHeaders = [], setSessionTokenHeader, sanitize) {\n        this.ignoredHeaders = ignoredHeaders;\n        this.setSessionTokenHeader = setSessionTokenHeader;\n        this.sanitize = sanitize;\n        this.id = '';\n        this.name = '';\n        this.method = '';\n        this.url = '';\n        this.status = 0;\n        this.statusText = '';\n        this.cancelState = 0;\n        this.readyState = 0;\n        this.header = {};\n        this.responseType = '';\n        this.requestHeader = {};\n        this.responseSize = 0; // bytes\n        this.responseSizeText = '';\n        this.startTime = 0;\n        this.endTime = 0;\n        this.duration = 0;\n        this.getData = {};\n        this.requestData = null;\n    }\n    getMessage() {\n        const { reqHs, resHs } = this.writeHeaders();\n        const request = {\n            headers: reqHs,\n            body: this.method === 'GET' ? JSON.stringify(this.getData) : this.requestData,\n        };\n        const response = { headers: resHs, body: this.response };\n        const messageInfo = this.sanitize({\n            url: this.url,\n            method: this.method,\n            status: this.status,\n            request,\n            response,\n        });\n        return NetworkRequest(this.requestType, messageInfo.method, messageInfo.url, JSON.stringify(messageInfo.request), JSON.stringify(messageInfo.response), messageInfo.status, this.startTime + getTimeOrigin(), this.duration, this.responseSize);\n    }\n    writeHeaders() {\n        const reqHs = {};\n        Object.entries(this.requestHeader).forEach(([key, value]) => {\n            if (this.isHeaderIgnored(key))\n                return;\n            reqHs[key] = value;\n        });\n        this.setSessionTokenHeader((name, value) => {\n            reqHs[name] = value;\n        });\n        const resHs = {};\n        Object.entries(this.header).forEach(([key, value]) => {\n            if (this.isHeaderIgnored(key))\n                return;\n            resHs[key] = value;\n        });\n        return { reqHs, resHs };\n    }\n    isHeaderIgnored(key) {\n        if (Array.isArray(this.ignoredHeaders)) {\n            return this.ignoredHeaders.map((k) => k.toLowerCase()).includes(key.toLowerCase());\n        }\n        else {\n            return this.ignoredHeaders;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}