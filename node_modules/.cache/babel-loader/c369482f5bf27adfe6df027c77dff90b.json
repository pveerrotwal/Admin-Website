{"ast":null,"code":"import FetchProxy from './fetchProxy.js';\nimport XHRProxy from './xhrProxy.js';\nimport BeaconProxy from './beaconProxy.js';\nconst getWarning = api => console.warn(`Openreplay: Can't find ${api} in global context. \nIf you're using serverside rendering in your app, make sure that tracker is loaded dynamically, otherwise ${api} won't be tracked.`);\nexport default function setProxy(context, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n  var _a;\n  if (context.XMLHttpRequest) {\n    context.XMLHttpRequest = XHRProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher);\n  } else {\n    getWarning('XMLHttpRequest');\n  }\n  if (context.fetch) {\n    context.fetch = FetchProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher);\n  } else {\n    getWarning('fetch');\n  }\n  if ((_a = context === null || context === void 0 ? void 0 : context.navigator) === null || _a === void 0 ? void 0 : _a.sendBeacon) {\n    context.navigator.sendBeacon = BeaconProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl);\n  }\n}","map":{"version":3,"names":["FetchProxy","XHRProxy","BeaconProxy","getWarning","api","console","warn","setProxy","context","ignoredHeaders","setSessionTokenHeader","sanitize","sendMessage","isServiceUrl","tokenUrlMatcher","_a","XMLHttpRequest","create","fetch","navigator","sendBeacon"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/modules/Network/index.js"],"sourcesContent":["import FetchProxy from './fetchProxy.js';\nimport XHRProxy from './xhrProxy.js';\nimport BeaconProxy from './beaconProxy.js';\nconst getWarning = (api) => console.warn(`Openreplay: Can't find ${api} in global context. \nIf you're using serverside rendering in your app, make sure that tracker is loaded dynamically, otherwise ${api} won't be tracked.`);\nexport default function setProxy(context, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n    var _a;\n    if (context.XMLHttpRequest) {\n        context.XMLHttpRequest = XHRProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher);\n    }\n    else {\n        getWarning('XMLHttpRequest');\n    }\n    if (context.fetch) {\n        context.fetch = FetchProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher);\n    }\n    else {\n        getWarning('fetch');\n    }\n    if ((_a = context === null || context === void 0 ? void 0 : context.navigator) === null || _a === void 0 ? void 0 : _a.sendBeacon) {\n        context.navigator.sendBeacon = BeaconProxy.create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl);\n    }\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,MAAMC,UAAU,GAAIC,GAAG,IAAKC,OAAO,CAACC,IAAI,CAAE,0BAAyBF,GAAI;AACvE,4GAA4GA,GAAI,oBAAmB,CAAC;AACpI,eAAe,SAASG,QAAQA,CAACC,OAAO,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAEC,eAAe,EAAE;EACnI,IAAIC,EAAE;EACN,IAAIP,OAAO,CAACQ,cAAc,EAAE;IACxBR,OAAO,CAACQ,cAAc,GAAGf,QAAQ,CAACgB,MAAM,CAACR,cAAc,EAAEC,qBAAqB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAEC,eAAe,CAAC;EACzI,CAAC,MACI;IACDX,UAAU,CAAC,gBAAgB,CAAC;EAChC;EACA,IAAIK,OAAO,CAACU,KAAK,EAAE;IACfV,OAAO,CAACU,KAAK,GAAGlB,UAAU,CAACiB,MAAM,CAACR,cAAc,EAAEC,qBAAqB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,EAAEC,eAAe,CAAC;EAClI,CAAC,MACI;IACDX,UAAU,CAAC,OAAO,CAAC;EACvB;EACA,IAAI,CAACY,EAAE,GAAGP,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACW,SAAS,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,UAAU,EAAE;IAC/HZ,OAAO,CAACW,SAAS,CAACC,UAAU,GAAGlB,WAAW,CAACe,MAAM,CAACR,cAAc,EAAEC,qBAAqB,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,CAAC;EACjI;AACJ"},"metadata":{},"sourceType":"module"}