{"ast":null,"code":"import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\nconst authProvider = (type, params) => {\n  // when a user tries to log in \n  if (type === AUTH_LOGIN) {\n    const {\n      email\n    } = params;\n    localStorage.setItem('email', email);\n    return Promise.resolve();\n  }\n  // when a user tries to logout\n  if (type === AUTH_LOGOUT) {\n    localStorage.removeItem(\"email\");\n    return Promise.resolve();\n  }\n  // when the API throws an error\n  if (type === AUTH_ERROR) {\n    const {\n      status\n    } = params;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('email');\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  }\n  // when a user navigates to a new location\n  if (type === AUTH_CHECK) {\n    return localStorage.getItem('email') ? Promise.resolve() : Promise.reject();\n  }\n  return Promise.reject('Unknown Method');\n};\nexport default authProvider;","map":{"version":3,"names":["AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","authProvider","type","params","email","localStorage","setItem","Promise","resolve","removeItem","status","reject","getItem"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/src/authProvider.js"],"sourcesContent":["import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\r\n   \r\nconst authProvider = (type, params) => {\r\n    // when a user tries to log in \r\n    if (type === AUTH_LOGIN) {\r\n     const { email } = params;\r\n     localStorage.setItem('email', email)\r\n     return Promise.resolve();\r\n    }\r\n    // when a user tries to logout\r\n    if (type === AUTH_LOGOUT) {\r\n        localStorage.removeItem(\"email\")\r\n        return Promise.resolve();\r\n        }\r\n    // when the API throws an error\r\n    if (type === AUTH_ERROR) {\r\n     const { status } = params;\r\n     if (status === 401 || status === 403) {\r\n      localStorage.removeItem('email');\r\n      return Promise.reject()\r\n     }\r\n     return Promise.resolve()\r\n    }\r\n    // when a user navigates to a new location\r\n    if (type === AUTH_CHECK) {\r\n     return localStorage.getItem('email') ?\r\n      Promise.resolve() :\r\n      Promise.reject();\r\n    }\r\n    return Promise.reject('Unknown Method');\r\n   };\r\n   export default authProvider;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAEC,UAAU,QAAQ,aAAa;AAE7E,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EACnC;EACA,IAAID,IAAI,KAAKL,UAAU,EAAE;IACxB,MAAM;MAAEO;IAAM,CAAC,GAAGD,MAAM;IACxBE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC,OAAOG,OAAO,CAACC,OAAO,CAAC,CAAC;EACzB;EACA;EACA,IAAIN,IAAI,KAAKJ,WAAW,EAAE;IACtBO,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOF,OAAO,CAACC,OAAO,CAAC,CAAC;EACxB;EACJ;EACA,IAAIN,IAAI,KAAKH,UAAU,EAAE;IACxB,MAAM;MAAEW;IAAO,CAAC,GAAGP,MAAM;IACzB,IAAIO,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;MACrCL,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;MAChC,OAAOF,OAAO,CAACI,MAAM,CAAC,CAAC;IACxB;IACA,OAAOJ,OAAO,CAACC,OAAO,CAAC,CAAC;EACzB;EACA;EACA,IAAIN,IAAI,KAAKF,UAAU,EAAE;IACxB,OAAOK,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC,GACnCL,OAAO,CAACC,OAAO,CAAC,CAAC,GACjBD,OAAO,CAACI,MAAM,CAAC,CAAC;EAClB;EACA,OAAOJ,OAAO,CAACI,MAAM,CAAC,gBAAgB,CAAC;AACxC,CAAC;AACD,eAAeV,YAAY"},"metadata":{},"sourceType":"module"}