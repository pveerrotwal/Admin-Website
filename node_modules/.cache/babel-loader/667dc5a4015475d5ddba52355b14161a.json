{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_js_1 = require(\"./utils.js\");\nclass SignalManager {\n  constructor(ingestPoint, getTimestamp, token, testId, storageKey, setStorageKey, removeStorageKey, getStorageKey, getSessionId) {\n    this.ingestPoint = ingestPoint;\n    this.getTimestamp = getTimestamp;\n    this.token = token;\n    this.testId = testId;\n    this.storageKey = storageKey;\n    this.setStorageKey = setStorageKey;\n    this.removeStorageKey = removeStorageKey;\n    this.getStorageKey = getStorageKey;\n    this.getSessionId = getSessionId;\n    this.durations = {\n      testStart: 0,\n      tasks: []\n    };\n    this.getDurations = () => {\n      return this.durations;\n    };\n    this.setDurations = durations => {\n      this.durations.testStart = durations.testStart;\n      this.durations.tasks = durations.tasks;\n    };\n    this.signalTask = (taskId, status, taskAnswer) => {\n      if (!taskId) return console.error('User Testing: No Task ID Given');\n      const taskStart = this.durations.tasks.find(t => t.taskId === taskId);\n      const timestamp = this.getTimestamp();\n      const duration = taskStart ? timestamp - taskStart.started : 0;\n      return fetch(`${this.ingestPoint}/v1/web/uxt/signals/task`, {\n        method: 'POST',\n        headers: {\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          Authorization: `Bearer ${this.token}`\n        },\n        body: JSON.stringify({\n          testId: this.testId,\n          taskId,\n          status,\n          duration,\n          timestamp,\n          taskAnswer\n        })\n      });\n    };\n    this.signalTest = status => {\n      const timestamp = this.getTimestamp();\n      if (status === 'begin' && this.testId) {\n        const sessionId = this.getSessionId();\n        this.setStorageKey(utils_js_1.SESSION_ID, sessionId);\n        this.setStorageKey(this.storageKey, this.testId.toString());\n        this.setStorageKey(utils_js_1.TEST_START, timestamp.toString());\n      } else {\n        this.removeStorageKey(this.storageKey);\n        this.removeStorageKey(utils_js_1.TASK_IND);\n        this.removeStorageKey(utils_js_1.TEST_START);\n      }\n      const start = this.durations.testStart || timestamp;\n      const duration = timestamp - start;\n      return fetch(`${this.ingestPoint}/v1/web/uxt/signals/test`, {\n        method: 'POST',\n        headers: {\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          Authorization: `Bearer ${this.token}`\n        },\n        body: JSON.stringify({\n          testId: this.testId,\n          status,\n          duration,\n          timestamp\n        })\n      });\n    };\n    const possibleStart = this.getStorageKey(utils_js_1.TEST_START);\n    if (possibleStart) {\n      this.durations.testStart = parseInt(possibleStart, 10);\n    }\n  }\n}\nexports.default = SignalManager;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils_js_1","require","SignalManager","constructor","ingestPoint","getTimestamp","token","testId","storageKey","setStorageKey","removeStorageKey","getStorageKey","getSessionId","durations","testStart","tasks","getDurations","setDurations","signalTask","taskId","status","taskAnswer","console","error","taskStart","find","t","timestamp","duration","started","fetch","method","headers","Authorization","body","JSON","stringify","signalTest","sessionId","SESSION_ID","toString","TEST_START","TASK_IND","start","possibleStart","parseInt","default"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/cjs/modules/userTesting/SignalManager.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_js_1 = require(\"./utils.js\");\nclass SignalManager {\n    constructor(ingestPoint, getTimestamp, token, testId, storageKey, setStorageKey, removeStorageKey, getStorageKey, getSessionId) {\n        this.ingestPoint = ingestPoint;\n        this.getTimestamp = getTimestamp;\n        this.token = token;\n        this.testId = testId;\n        this.storageKey = storageKey;\n        this.setStorageKey = setStorageKey;\n        this.removeStorageKey = removeStorageKey;\n        this.getStorageKey = getStorageKey;\n        this.getSessionId = getSessionId;\n        this.durations = {\n            testStart: 0,\n            tasks: [],\n        };\n        this.getDurations = () => {\n            return this.durations;\n        };\n        this.setDurations = (durations) => {\n            this.durations.testStart = durations.testStart;\n            this.durations.tasks = durations.tasks;\n        };\n        this.signalTask = (taskId, status, taskAnswer) => {\n            if (!taskId)\n                return console.error('User Testing: No Task ID Given');\n            const taskStart = this.durations.tasks.find((t) => t.taskId === taskId);\n            const timestamp = this.getTimestamp();\n            const duration = taskStart ? timestamp - taskStart.started : 0;\n            return fetch(`${this.ingestPoint}/v1/web/uxt/signals/task`, {\n                method: 'POST',\n                headers: {\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    Authorization: `Bearer ${this.token}`,\n                },\n                body: JSON.stringify({\n                    testId: this.testId,\n                    taskId,\n                    status,\n                    duration,\n                    timestamp,\n                    taskAnswer,\n                }),\n            });\n        };\n        this.signalTest = (status) => {\n            const timestamp = this.getTimestamp();\n            if (status === 'begin' && this.testId) {\n                const sessionId = this.getSessionId();\n                this.setStorageKey(utils_js_1.SESSION_ID, sessionId);\n                this.setStorageKey(this.storageKey, this.testId.toString());\n                this.setStorageKey(utils_js_1.TEST_START, timestamp.toString());\n            }\n            else {\n                this.removeStorageKey(this.storageKey);\n                this.removeStorageKey(utils_js_1.TASK_IND);\n                this.removeStorageKey(utils_js_1.TEST_START);\n            }\n            const start = this.durations.testStart || timestamp;\n            const duration = timestamp - start;\n            return fetch(`${this.ingestPoint}/v1/web/uxt/signals/test`, {\n                method: 'POST',\n                headers: {\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    Authorization: `Bearer ${this.token}`,\n                },\n                body: JSON.stringify({\n                    testId: this.testId,\n                    status,\n                    duration,\n                    timestamp,\n                }),\n            });\n        };\n        const possibleStart = this.getStorageKey(utils_js_1.TEST_START);\n        if (possibleStart) {\n            this.durations.testStart = parseInt(possibleStart, 10);\n        }\n    }\n}\nexports.default = SignalManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}