{"ast":null,"code":"export const genResponseByType = (responseType, response) => {\n  let result = '';\n  switch (responseType) {\n    case '':\n    case 'text':\n    case 'json':\n      if (typeof response == 'string') {\n        try {\n          result = JSON.parse(response);\n        } catch (e) {\n          // not a JSON string\n          result = response.slice(0, 10000);\n        }\n      } else if (isPureObject(response) || Array.isArray(response)) {\n        result = JSON.stringify(response);\n      } else if (typeof response !== 'undefined') {\n        result = Object.prototype.toString.call(response);\n      }\n      break;\n    case 'blob':\n    case 'document':\n    case 'arraybuffer':\n    default:\n      if (typeof response !== 'undefined') {\n        result = Object.prototype.toString.call(response);\n      }\n      break;\n  }\n  return result;\n};\nexport const getStringResponseByType = (responseType, response) => {\n  let result = '';\n  switch (responseType) {\n    case '':\n    case 'text':\n    case 'json':\n      if (typeof response == 'string') {\n        result = response;\n      } else if (isPureObject(response) || Array.isArray(response)) {\n        result = JSON.stringify(response);\n      } else if (typeof response !== 'undefined') {\n        result = Object.prototype.toString.call(response);\n      }\n      break;\n    case 'blob':\n    case 'document':\n    case 'arraybuffer':\n    default:\n      if (typeof response !== 'undefined') {\n        result = Object.prototype.toString.call(response);\n      }\n      break;\n  }\n  return result;\n};\nexport const genStringBody = body => {\n  if (!body) {\n    return null;\n  }\n  let result;\n  if (typeof body === 'string') {\n    if (body[0] === '{' || body[0] === '[') {\n      result = body;\n    }\n    // 'a=1&b=2' => try to parse as query\n    const arr = body.split('&');\n    if (arr.length === 1) {\n      // not a query, parse as original string\n      result = body;\n    } else {\n      // 'a=1&b=2&c' => parse as query\n      result = arr.join(',');\n    }\n  } else if (isIterable(body)) {\n    // FormData or URLSearchParams or Array\n    const arr = [];\n    for (const [key, value] of body) {\n      arr.push(`${key}=${typeof value === 'string' ? value : '[object Object]'}`);\n    }\n    result = arr.join(',');\n  } else if (body instanceof Blob || body instanceof ReadableStream || body instanceof ArrayBuffer) {\n    result = 'byte data';\n  } else if (isPureObject(body)) {\n    // overriding ArrayBufferView which is not convertable to string\n    result = body;\n  } else {\n    result = `can't parse body ${typeof body}`;\n  }\n  return result;\n};\nexport const genGetDataByUrl = (url, getData = {}) => {\n  if (!isPureObject(getData)) {\n    getData = {};\n  }\n  let query = url ? url.split('?') : []; // a.php?b=c&d=?e => ['a.php', 'b=c&d=', 'e']\n  query.shift(); // => ['b=c&d=', 'e']\n  if (query.length > 0) {\n    query = query.join('?').split('&'); // => 'b=c&d=?e' => ['b=c', 'd=?e']\n    for (const q of query) {\n      const kv = q.split('=');\n      try {\n        getData[kv[0]] = decodeURIComponent(kv[1]);\n      } catch (e) {\n        // \"URIError: URI malformed\" will be thrown when `kv[1]` contains \"%\", so just use raw data\n        // @issue #470\n        // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\n        getData[kv[0]] = kv[1];\n      }\n    }\n  }\n  return getData;\n};\nexport const genFormattedBody = body => {\n  if (!body) {\n    return null;\n  }\n  let result;\n  if (typeof body === 'string') {\n    try {\n      // '{a:1}' =>\n      result = JSON.parse(body);\n    } catch (e) {\n      // 'a=1&b=2' => try to parse as query\n      const arr = body.split('&');\n      result = {};\n      // eslint-disable-next-line\n      for (let q of arr) {\n        const kv = q.split('=');\n        result[kv[0]] = kv[1] === undefined ? 'undefined' : kv[1];\n      }\n    }\n  } else if (isIterable(body)) {\n    // FormData or URLSearchParams or Array\n    result = {};\n    for (const [key, value] of body) {\n      result[key] = typeof value === 'string' ? value : '[object Object]';\n    }\n  } else if (body instanceof Blob || body instanceof ReadableStream || body instanceof ArrayBuffer) {\n    result = 'byte data';\n  } else if (isPureObject(body)) {\n    // overriding ArrayBufferView which is not convertable to string\n    result = body;\n  } else {\n    result = `can't parse body ${typeof body}`;\n  }\n  return result;\n};\nexport function isPureObject(input) {\n  return null !== input && typeof input === 'object';\n}\nexport function isIterable(value) {\n  if (value === null || value === undefined) {\n    return false;\n  }\n  return typeof Symbol !== 'undefined' && typeof value[Symbol.iterator] === 'function';\n}\nexport function formatByteSize(bytes) {\n  if (bytes <= 0) {\n    // shouldn't happen?\n    return '';\n  }\n  if (bytes >= 1000 * 1000) {\n    return (bytes / 1000 / 1000).toFixed(1) + ' MB';\n  }\n  if (bytes >= 1000) {\n    return (bytes / 1000).toFixed(1) + ' KB';\n  }\n  return `${bytes}B`;\n}\nexport const getURL = urlString => {\n  if (urlString.startsWith('//')) {\n    const baseUrl = new URL(window.location.href);\n    urlString = `${baseUrl.protocol}${urlString}`;\n  }\n  if (urlString.startsWith('http')) {\n    return new URL(urlString);\n  } else {\n    return new URL(urlString, window.location.href);\n  }\n};","map":{"version":3,"names":["genResponseByType","responseType","response","result","JSON","parse","e","slice","isPureObject","Array","isArray","stringify","Object","prototype","toString","call","getStringResponseByType","genStringBody","body","arr","split","length","join","isIterable","key","value","push","Blob","ReadableStream","ArrayBuffer","genGetDataByUrl","url","getData","query","shift","q","kv","decodeURIComponent","genFormattedBody","undefined","input","Symbol","iterator","formatByteSize","bytes","toFixed","getURL","urlString","startsWith","baseUrl","URL","window","location","href","protocol"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/modules/Network/utils.js"],"sourcesContent":["export const genResponseByType = (responseType, response) => {\n    let result = '';\n    switch (responseType) {\n        case '':\n        case 'text':\n        case 'json':\n            if (typeof response == 'string') {\n                try {\n                    result = JSON.parse(response);\n                }\n                catch (e) {\n                    // not a JSON string\n                    result = response.slice(0, 10000);\n                }\n            }\n            else if (isPureObject(response) || Array.isArray(response)) {\n                result = JSON.stringify(response);\n            }\n            else if (typeof response !== 'undefined') {\n                result = Object.prototype.toString.call(response);\n            }\n            break;\n        case 'blob':\n        case 'document':\n        case 'arraybuffer':\n        default:\n            if (typeof response !== 'undefined') {\n                result = Object.prototype.toString.call(response);\n            }\n            break;\n    }\n    return result;\n};\nexport const getStringResponseByType = (responseType, response) => {\n    let result = '';\n    switch (responseType) {\n        case '':\n        case 'text':\n        case 'json':\n            if (typeof response == 'string') {\n                result = response;\n            }\n            else if (isPureObject(response) || Array.isArray(response)) {\n                result = JSON.stringify(response);\n            }\n            else if (typeof response !== 'undefined') {\n                result = Object.prototype.toString.call(response);\n            }\n            break;\n        case 'blob':\n        case 'document':\n        case 'arraybuffer':\n        default:\n            if (typeof response !== 'undefined') {\n                result = Object.prototype.toString.call(response);\n            }\n            break;\n    }\n    return result;\n};\nexport const genStringBody = (body) => {\n    if (!body) {\n        return null;\n    }\n    let result;\n    if (typeof body === 'string') {\n        if (body[0] === '{' || body[0] === '[') {\n            result = body;\n        }\n        // 'a=1&b=2' => try to parse as query\n        const arr = body.split('&');\n        if (arr.length === 1) {\n            // not a query, parse as original string\n            result = body;\n        }\n        else {\n            // 'a=1&b=2&c' => parse as query\n            result = arr.join(',');\n        }\n    }\n    else if (isIterable(body)) {\n        // FormData or URLSearchParams or Array\n        const arr = [];\n        for (const [key, value] of body) {\n            arr.push(`${key}=${typeof value === 'string' ? value : '[object Object]'}`);\n        }\n        result = arr.join(',');\n    }\n    else if (body instanceof Blob ||\n        body instanceof ReadableStream ||\n        body instanceof ArrayBuffer) {\n        result = 'byte data';\n    }\n    else if (isPureObject(body)) {\n        // overriding ArrayBufferView which is not convertable to string\n        result = body;\n    }\n    else {\n        result = `can't parse body ${typeof body}`;\n    }\n    return result;\n};\nexport const genGetDataByUrl = (url, getData = {}) => {\n    if (!isPureObject(getData)) {\n        getData = {};\n    }\n    let query = url ? url.split('?') : []; // a.php?b=c&d=?e => ['a.php', 'b=c&d=', 'e']\n    query.shift(); // => ['b=c&d=', 'e']\n    if (query.length > 0) {\n        query = query.join('?').split('&'); // => 'b=c&d=?e' => ['b=c', 'd=?e']\n        for (const q of query) {\n            const kv = q.split('=');\n            try {\n                getData[kv[0]] = decodeURIComponent(kv[1]);\n            }\n            catch (e) {\n                // \"URIError: URI malformed\" will be thrown when `kv[1]` contains \"%\", so just use raw data\n                // @issue #470\n                // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI\n                getData[kv[0]] = kv[1];\n            }\n        }\n    }\n    return getData;\n};\nexport const genFormattedBody = (body) => {\n    if (!body) {\n        return null;\n    }\n    let result;\n    if (typeof body === 'string') {\n        try {\n            // '{a:1}' =>\n            result = JSON.parse(body);\n        }\n        catch (e) {\n            // 'a=1&b=2' => try to parse as query\n            const arr = body.split('&');\n            result = {};\n            // eslint-disable-next-line\n            for (let q of arr) {\n                const kv = q.split('=');\n                result[kv[0]] = kv[1] === undefined ? 'undefined' : kv[1];\n            }\n        }\n    }\n    else if (isIterable(body)) {\n        // FormData or URLSearchParams or Array\n        result = {};\n        for (const [key, value] of body) {\n            result[key] = typeof value === 'string' ? value : '[object Object]';\n        }\n    }\n    else if (body instanceof Blob ||\n        body instanceof ReadableStream ||\n        body instanceof ArrayBuffer) {\n        result = 'byte data';\n    }\n    else if (isPureObject(body)) {\n        // overriding ArrayBufferView which is not convertable to string\n        result = body;\n    }\n    else {\n        result = `can't parse body ${typeof body}`;\n    }\n    return result;\n};\nexport function isPureObject(input) {\n    return null !== input && typeof input === 'object';\n}\nexport function isIterable(value) {\n    if (value === null || value === undefined) {\n        return false;\n    }\n    return typeof Symbol !== 'undefined' && typeof value[Symbol.iterator] === 'function';\n}\nexport function formatByteSize(bytes) {\n    if (bytes <= 0) {\n        // shouldn't happen?\n        return '';\n    }\n    if (bytes >= 1000 * 1000) {\n        return (bytes / 1000 / 1000).toFixed(1) + ' MB';\n    }\n    if (bytes >= 1000) {\n        return (bytes / 1000).toFixed(1) + ' KB';\n    }\n    return `${bytes}B`;\n}\nexport const getURL = (urlString) => {\n    if (urlString.startsWith('//')) {\n        const baseUrl = new URL(window.location.href);\n        urlString = `${baseUrl.protocol}${urlString}`;\n    }\n    if (urlString.startsWith('http')) {\n        return new URL(urlString);\n    }\n    else {\n        return new URL(urlString, window.location.href);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}