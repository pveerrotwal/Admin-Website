{"ast":null,"code":"/**\n * I took inspiration in few stack exchange posts\n * and Tencent vConsole library (MIT)\n * by wrapping the XMLHttpRequest object in a Proxy\n * we can intercept the network requests\n * in not-so-hacky way\n * */\nimport NetworkMessage, { RequestState } from './networkMessage.js';\nimport { genGetDataByUrl, formatByteSize, genStringBody, getStringResponseByType } from './utils.js';\nexport class XHRProxyHandler {\n  constructor(XMLReq, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n    this.ignoredHeaders = ignoredHeaders;\n    this.setSessionTokenHeader = setSessionTokenHeader;\n    this.sanitize = sanitize;\n    this.sendMessage = sendMessage;\n    this.isServiceUrl = isServiceUrl;\n    this.tokenUrlMatcher = tokenUrlMatcher;\n    this.XMLReq = XMLReq;\n    this.XMLReq.onreadystatechange = () => {\n      this.onReadyStateChange();\n    };\n    this.XMLReq.onabort = () => {\n      this.onAbort();\n    };\n    this.XMLReq.ontimeout = () => {\n      this.onTimeout();\n    };\n    this.item = new NetworkMessage(ignoredHeaders, setSessionTokenHeader, sanitize);\n    this.item.requestType = 'xhr';\n  }\n  get(target, key) {\n    switch (key) {\n      case 'open':\n        return this.getOpen(target);\n      case 'send':\n        this.setSessionTokenHeader((name, value) => {\n          if (this.tokenUrlMatcher !== undefined) {\n            if (!this.tokenUrlMatcher(this.item.url)) {\n              return;\n            }\n          }\n          target.setRequestHeader(name, value);\n        });\n        return this.getSend(target);\n      case 'setRequestHeader':\n        return this.getSetRequestHeader(target);\n      default:\n        // eslint-disable-next-line no-case-declarations\n        const value = Reflect.get(target, key);\n        if (typeof value === 'function') {\n          return value.bind(target);\n        } else {\n          return value;\n        }\n    }\n  }\n  set(target, key, value) {\n    switch (key) {\n      case 'onreadystatechange':\n        return this.setOnReadyStateChange(target, key, value);\n      case 'onabort':\n        return this.setOnAbort(target, key, value);\n      case 'ontimeout':\n        return this.setOnTimeout(target, key, value);\n      default:\n      // not tracked methods\n    }\n    return Reflect.set(target, key, value);\n  }\n  onReadyStateChange() {\n    if (this.item.url && this.isServiceUrl(this.item.url)) return;\n    this.item.readyState = this.XMLReq.readyState;\n    this.item.responseType = this.XMLReq.responseType;\n    this.item.endTime = performance.now();\n    this.item.duration = this.item.endTime - this.item.startTime;\n    this.updateItemByReadyState();\n    setTimeout(() => {\n      this.item.response = getStringResponseByType(this.item.responseType, this.item.response);\n    }, 0);\n    if (this.XMLReq.readyState === RequestState.DONE) {\n      this.sendMessage(this.item.getMessage());\n    }\n  }\n  onAbort() {\n    this.item.cancelState = 1;\n    this.item.statusText = 'Abort';\n    this.sendMessage(this.item.getMessage());\n  }\n  onTimeout() {\n    this.item.cancelState = 3;\n    this.item.statusText = 'Timeout';\n    this.sendMessage(this.item.getMessage());\n  }\n  getOpen(target) {\n    const targetFunction = Reflect.get(target, 'open');\n    return (...args) => {\n      const method = args[0];\n      const url = args[1];\n      this.item.method = method ? method.toUpperCase() : 'GET';\n      this.item.url = url || '';\n      this.item.name = this.item.url.replace(new RegExp('/*$'), '').split('/').pop() || '';\n      this.item.getData = genGetDataByUrl(this.item.url, {});\n      return targetFunction.apply(target, args);\n    };\n  }\n  getSend(target) {\n    const targetFunction = Reflect.get(target, 'send');\n    return (...args) => {\n      const data = args[0];\n      this.item.requestData = genStringBody(data);\n      return targetFunction.apply(target, args);\n    };\n  }\n  getSetRequestHeader(target) {\n    const targetFunction = Reflect.get(target, 'setRequestHeader');\n    return (...args) => {\n      if (!this.item.requestHeader) {\n        this.item.requestHeader = {};\n      }\n      // @ts-ignore\n      this.item.requestHeader[args[0]] = args[1];\n      return targetFunction.apply(target, args);\n    };\n  }\n  setOnReadyStateChange(target, key, orscFunction) {\n    return Reflect.set(target, key, (...args) => {\n      this.onReadyStateChange();\n      orscFunction === null || orscFunction === void 0 ? void 0 : orscFunction.apply(target, args);\n    });\n  }\n  setOnAbort(target, key, oaFunction) {\n    return Reflect.set(target, key, (...args) => {\n      this.onAbort();\n      oaFunction.apply(target, args);\n    });\n  }\n  setOnTimeout(target, key, otFunction) {\n    return Reflect.set(target, key, (...args) => {\n      this.onTimeout();\n      otFunction.apply(target, args);\n    });\n  }\n  /**\n   * Update item's properties according to readyState.\n   */\n  updateItemByReadyState() {\n    switch (this.XMLReq.readyState) {\n      case RequestState.UNSENT:\n      case RequestState.OPENED:\n        this.item.status = RequestState.UNSENT;\n        this.item.statusText = 'Pending';\n        if (!this.item.startTime) {\n          this.item.startTime = performance.now();\n        }\n        break;\n      case RequestState.HEADERS_RECEIVED:\n        this.item.status = this.XMLReq.status;\n        this.item.statusText = 'Loading';\n        this.item.header = {};\n        // eslint-disable-next-line no-case-declarations\n        const header = this.XMLReq.getAllResponseHeaders() || '',\n          headerArr = header.split('\\n');\n        // extract plain text to key-value format\n        for (let i = 0; i < headerArr.length; i++) {\n          const line = headerArr[i];\n          if (!line) {\n            continue;\n          }\n          const arr = line.split(': ');\n          const key = arr[0];\n          this.item.header[key] = arr.slice(1).join(': ');\n        }\n        break;\n      case RequestState.LOADING:\n        this.item.status = this.XMLReq.status;\n        this.item.statusText = 'Loading';\n        if (!!this.XMLReq.response && this.XMLReq.response.length) {\n          this.item.responseSize = this.XMLReq.response.length;\n          this.item.responseSizeText = formatByteSize(this.item.responseSize);\n        }\n        break;\n      case RequestState.DONE:\n        // `XMLReq.abort()` will change `status` from 200 to 0, so use previous value in this case\n        this.item.status = this.XMLReq.status || this.item.status || 0;\n        // show status code when request completed\n        this.item.statusText = String(this.item.status);\n        this.item.endTime = performance.now();\n        this.item.duration = this.item.endTime - (this.item.startTime || this.item.endTime);\n        this.item.response = this.XMLReq.response;\n        if (!!this.XMLReq.response && this.XMLReq.response.length) {\n          this.item.responseSize = this.XMLReq.response.length;\n          this.item.responseSizeText = formatByteSize(this.item.responseSize);\n        }\n        break;\n      default:\n        this.item.status = this.XMLReq.status;\n        this.item.statusText = 'Unknown';\n        break;\n    }\n  }\n}\nexport default class XHRProxy {\n  static create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n    return new Proxy(XMLHttpRequest, {\n      construct(original) {\n        const XMLReq = new original();\n        return new Proxy(XMLReq, new XHRProxyHandler(XMLReq, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher));\n      }\n    });\n  }\n}","map":{"version":3,"names":["NetworkMessage","RequestState","genGetDataByUrl","formatByteSize","genStringBody","getStringResponseByType","XHRProxyHandler","constructor","XMLReq","ignoredHeaders","setSessionTokenHeader","sanitize","sendMessage","isServiceUrl","tokenUrlMatcher","onreadystatechange","onReadyStateChange","onabort","onAbort","ontimeout","onTimeout","item","requestType","get","target","key","getOpen","name","value","undefined","url","setRequestHeader","getSend","getSetRequestHeader","Reflect","bind","set","setOnReadyStateChange","setOnAbort","setOnTimeout","readyState","responseType","endTime","performance","now","duration","startTime","updateItemByReadyState","setTimeout","response","DONE","getMessage","cancelState","statusText","targetFunction","args","method","toUpperCase","replace","RegExp","split","pop","getData","apply","data","requestData","requestHeader","orscFunction","oaFunction","otFunction","UNSENT","OPENED","status","HEADERS_RECEIVED","header","getAllResponseHeaders","headerArr","i","length","line","arr","slice","join","LOADING","responseSize","responseSizeText","String","XHRProxy","create","Proxy","XMLHttpRequest","construct","original"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/modules/Network/xhrProxy.js"],"sourcesContent":["/**\n * I took inspiration in few stack exchange posts\n * and Tencent vConsole library (MIT)\n * by wrapping the XMLHttpRequest object in a Proxy\n * we can intercept the network requests\n * in not-so-hacky way\n * */\nimport NetworkMessage, { RequestState } from './networkMessage.js';\nimport { genGetDataByUrl, formatByteSize, genStringBody, getStringResponseByType } from './utils.js';\nexport class XHRProxyHandler {\n    constructor(XMLReq, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n        this.ignoredHeaders = ignoredHeaders;\n        this.setSessionTokenHeader = setSessionTokenHeader;\n        this.sanitize = sanitize;\n        this.sendMessage = sendMessage;\n        this.isServiceUrl = isServiceUrl;\n        this.tokenUrlMatcher = tokenUrlMatcher;\n        this.XMLReq = XMLReq;\n        this.XMLReq.onreadystatechange = () => {\n            this.onReadyStateChange();\n        };\n        this.XMLReq.onabort = () => {\n            this.onAbort();\n        };\n        this.XMLReq.ontimeout = () => {\n            this.onTimeout();\n        };\n        this.item = new NetworkMessage(ignoredHeaders, setSessionTokenHeader, sanitize);\n        this.item.requestType = 'xhr';\n    }\n    get(target, key) {\n        switch (key) {\n            case 'open':\n                return this.getOpen(target);\n            case 'send':\n                this.setSessionTokenHeader((name, value) => {\n                    if (this.tokenUrlMatcher !== undefined) {\n                        if (!this.tokenUrlMatcher(this.item.url)) {\n                            return;\n                        }\n                    }\n                    target.setRequestHeader(name, value);\n                });\n                return this.getSend(target);\n            case 'setRequestHeader':\n                return this.getSetRequestHeader(target);\n            default:\n                // eslint-disable-next-line no-case-declarations\n                const value = Reflect.get(target, key);\n                if (typeof value === 'function') {\n                    return value.bind(target);\n                }\n                else {\n                    return value;\n                }\n        }\n    }\n    set(target, key, value) {\n        switch (key) {\n            case 'onreadystatechange':\n                return this.setOnReadyStateChange(target, key, value);\n            case 'onabort':\n                return this.setOnAbort(target, key, value);\n            case 'ontimeout':\n                return this.setOnTimeout(target, key, value);\n            default:\n            // not tracked methods\n        }\n        return Reflect.set(target, key, value);\n    }\n    onReadyStateChange() {\n        if (this.item.url && this.isServiceUrl(this.item.url))\n            return;\n        this.item.readyState = this.XMLReq.readyState;\n        this.item.responseType = this.XMLReq.responseType;\n        this.item.endTime = performance.now();\n        this.item.duration = this.item.endTime - this.item.startTime;\n        this.updateItemByReadyState();\n        setTimeout(() => {\n            this.item.response = getStringResponseByType(this.item.responseType, this.item.response);\n        }, 0);\n        if (this.XMLReq.readyState === RequestState.DONE) {\n            this.sendMessage(this.item.getMessage());\n        }\n    }\n    onAbort() {\n        this.item.cancelState = 1;\n        this.item.statusText = 'Abort';\n        this.sendMessage(this.item.getMessage());\n    }\n    onTimeout() {\n        this.item.cancelState = 3;\n        this.item.statusText = 'Timeout';\n        this.sendMessage(this.item.getMessage());\n    }\n    getOpen(target) {\n        const targetFunction = Reflect.get(target, 'open');\n        return (...args) => {\n            const method = args[0];\n            const url = args[1];\n            this.item.method = method ? method.toUpperCase() : 'GET';\n            this.item.url = url || '';\n            this.item.name = this.item.url.replace(new RegExp('/*$'), '').split('/').pop() || '';\n            this.item.getData = genGetDataByUrl(this.item.url, {});\n            return targetFunction.apply(target, args);\n        };\n    }\n    getSend(target) {\n        const targetFunction = Reflect.get(target, 'send');\n        return (...args) => {\n            const data = args[0];\n            this.item.requestData = genStringBody(data);\n            return targetFunction.apply(target, args);\n        };\n    }\n    getSetRequestHeader(target) {\n        const targetFunction = Reflect.get(target, 'setRequestHeader');\n        return (...args) => {\n            if (!this.item.requestHeader) {\n                this.item.requestHeader = {};\n            }\n            // @ts-ignore\n            this.item.requestHeader[args[0]] = args[1];\n            return targetFunction.apply(target, args);\n        };\n    }\n    setOnReadyStateChange(target, key, orscFunction) {\n        return Reflect.set(target, key, (...args) => {\n            this.onReadyStateChange();\n            orscFunction === null || orscFunction === void 0 ? void 0 : orscFunction.apply(target, args);\n        });\n    }\n    setOnAbort(target, key, oaFunction) {\n        return Reflect.set(target, key, (...args) => {\n            this.onAbort();\n            oaFunction.apply(target, args);\n        });\n    }\n    setOnTimeout(target, key, otFunction) {\n        return Reflect.set(target, key, (...args) => {\n            this.onTimeout();\n            otFunction.apply(target, args);\n        });\n    }\n    /**\n     * Update item's properties according to readyState.\n     */\n    updateItemByReadyState() {\n        switch (this.XMLReq.readyState) {\n            case RequestState.UNSENT:\n            case RequestState.OPENED:\n                this.item.status = RequestState.UNSENT;\n                this.item.statusText = 'Pending';\n                if (!this.item.startTime) {\n                    this.item.startTime = performance.now();\n                }\n                break;\n            case RequestState.HEADERS_RECEIVED:\n                this.item.status = this.XMLReq.status;\n                this.item.statusText = 'Loading';\n                this.item.header = {};\n                // eslint-disable-next-line no-case-declarations\n                const header = this.XMLReq.getAllResponseHeaders() || '', headerArr = header.split('\\n');\n                // extract plain text to key-value format\n                for (let i = 0; i < headerArr.length; i++) {\n                    const line = headerArr[i];\n                    if (!line) {\n                        continue;\n                    }\n                    const arr = line.split(': ');\n                    const key = arr[0];\n                    this.item.header[key] = arr.slice(1).join(': ');\n                }\n                break;\n            case RequestState.LOADING:\n                this.item.status = this.XMLReq.status;\n                this.item.statusText = 'Loading';\n                if (!!this.XMLReq.response && this.XMLReq.response.length) {\n                    this.item.responseSize = this.XMLReq.response.length;\n                    this.item.responseSizeText = formatByteSize(this.item.responseSize);\n                }\n                break;\n            case RequestState.DONE:\n                // `XMLReq.abort()` will change `status` from 200 to 0, so use previous value in this case\n                this.item.status = this.XMLReq.status || this.item.status || 0;\n                // show status code when request completed\n                this.item.statusText = String(this.item.status);\n                this.item.endTime = performance.now();\n                this.item.duration = this.item.endTime - (this.item.startTime || this.item.endTime);\n                this.item.response = this.XMLReq.response;\n                if (!!this.XMLReq.response && this.XMLReq.response.length) {\n                    this.item.responseSize = this.XMLReq.response.length;\n                    this.item.responseSizeText = formatByteSize(this.item.responseSize);\n                }\n                break;\n            default:\n                this.item.status = this.XMLReq.status;\n                this.item.statusText = 'Unknown';\n                break;\n        }\n    }\n}\nexport default class XHRProxy {\n    static create(ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher) {\n        return new Proxy(XMLHttpRequest, {\n            construct(original) {\n                const XMLReq = new original();\n                return new Proxy(XMLReq, new XHRProxyHandler(XMLReq, ignoredHeaders, setSessionTokenHeader, sanitize, sendMessage, isServiceUrl, tokenUrlMatcher));\n            },\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}