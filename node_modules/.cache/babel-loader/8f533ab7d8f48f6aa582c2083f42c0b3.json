{"ast":null,"code":"import { NetworkRequest } from '../app/messages.gen.js';\nimport { getTimeOrigin } from '../utils.js';\nimport { getExceptionMessage } from './exception.js';\nexport default function (app, instance, opts, sanitize, stringify) {\n  app.debug.log('Openreplay: attaching axios spy to instance', instance);\n  function captureResponseData(axiosResponseObj) {\n    app.debug.log('Openreplay: capturing axios response data', axiosResponseObj);\n    const {\n      headers: reqHs,\n      data: reqData,\n      method,\n      url,\n      baseURL\n    } = axiosResponseObj.config;\n    const {\n      data: rData,\n      headers: rHs,\n      status: globStatus,\n      response\n    } = axiosResponseObj;\n    const {\n      data: resData,\n      headers: resHs,\n      status: resStatus\n    } = response || {};\n    const ihOpt = opts.ignoreHeaders;\n    const isHIgnoring = Array.isArray(ihOpt) ? name => ihOpt.includes(name) : () => ihOpt;\n    function writeHeader(hsObj, header) {\n      if (!isHIgnoring(header[0])) {\n        hsObj[header[0]] = header[1];\n      }\n    }\n    let requestHs = {};\n    let responseHs = {};\n    if (reqHs.toJSON) {\n      requestHs = reqHs.toJSON();\n    } else if (reqHs instanceof Headers) {\n      reqHs.forEach((v, n) => writeHeader(requestHs, [n, v]));\n    } else if (Array.isArray(reqHs)) {\n      reqHs.forEach(h => writeHeader(requestHs, h));\n    } else if (typeof reqHs === 'object') {\n      Object.entries(reqHs).forEach(h => writeHeader(requestHs, h));\n    }\n    const usedResHeader = resHs ? resHs : rHs;\n    if (usedResHeader.toJSON) {\n      responseHs = usedResHeader.toJSON();\n    } else if (usedResHeader instanceof Headers) {\n      usedResHeader.forEach((v, n) => writeHeader(responseHs, [n, v]));\n    } else if (Array.isArray(usedResHeader)) {\n      usedResHeader.forEach(h => writeHeader(responseHs, h));\n    } else if (typeof usedResHeader === 'object') {\n      Object.entries(usedResHeader).forEach(([n, v]) => {\n        if (!isHIgnoring(n)) responseHs[n] = v;\n      });\n    }\n    const reqResInfo = sanitize({\n      url,\n      method: method || '',\n      status: globStatus || resStatus || 0,\n      request: {\n        headers: requestHs,\n        body: reqData\n      },\n      response: {\n        headers: responseHs,\n        body: resData || rData\n      }\n    });\n    if (!reqResInfo) {\n      app.debug.log('Openreplay: empty request/response info, skipping');\n      return;\n    }\n    const requestStart = axiosResponseObj.config.__openreplay_timing;\n    const duration = performance.now() - requestStart;\n    app.debug.log('Openreplay: final req object', reqResInfo);\n    app.send(NetworkRequest('xhr', String(method), String(reqResInfo.url), stringify(reqResInfo.request), stringify(reqResInfo.response), reqResInfo.status, requestStart + getTimeOrigin(), duration, 0));\n  }\n  function getStartTime(config) {\n    app.debug.log('Openreplay: capturing API request', config);\n    config.__openreplay_timing = performance.now();\n    if (opts.sessionTokenHeader) {\n      const header = typeof opts.sessionTokenHeader === 'string' ? opts.sessionTokenHeader : 'X-OpenReplay-Session-Token';\n      const headerValue = app.getSessionToken();\n      if (headerValue) {\n        config.headers.set(header, headerValue);\n      }\n    }\n    return config;\n  }\n  function captureNetworkRequest(response) {\n    if (opts.failuresOnly) return response;\n    captureResponseData(response);\n    return response;\n  }\n  function captureNetworkError(error) {\n    app.debug.log('Openreplay: capturing API request error', error);\n    if (isAxiosError(error) && Boolean(error.response)) {\n      captureResponseData(error.response);\n    } else if (error instanceof Error) {\n      app.send(getExceptionMessage(error, []));\n    }\n    return Promise.reject(error);\n  }\n  function logRequestError(ev) {\n    app.debug.log('Openreplay: failed API request, skipping', ev);\n  }\n  const reqInt = instance.interceptors.request.use(getStartTime, logRequestError, {\n    synchronous: true\n  });\n  const resInt = instance.interceptors.response.use(captureNetworkRequest, captureNetworkError, {\n    synchronous: true\n  });\n  app.attachStopCallback(() => {\n    var _a, _b, _c, _d;\n    (_b = (_a = instance.interceptors.request).eject) === null || _b === void 0 ? void 0 : _b.call(_a, reqInt);\n    (_d = (_c = instance.interceptors.response).eject) === null || _d === void 0 ? void 0 : _d.call(_c, resInt);\n  });\n}\nfunction isAxiosError(payload) {\n  return isObject(payload) && payload.isAxiosError === true;\n}\nfunction isObject(thing) {\n  return thing !== null && typeof thing === 'object';\n}","map":{"version":3,"names":["NetworkRequest","getTimeOrigin","getExceptionMessage","app","instance","opts","sanitize","stringify","debug","log","captureResponseData","axiosResponseObj","headers","reqHs","data","reqData","method","url","baseURL","config","rData","rHs","status","globStatus","response","resData","resHs","resStatus","ihOpt","ignoreHeaders","isHIgnoring","Array","isArray","name","includes","writeHeader","hsObj","header","requestHs","responseHs","toJSON","Headers","forEach","v","n","h","Object","entries","usedResHeader","reqResInfo","request","body","requestStart","__openreplay_timing","duration","performance","now","send","String","getStartTime","sessionTokenHeader","headerValue","getSessionToken","set","captureNetworkRequest","failuresOnly","captureNetworkError","error","isAxiosError","Boolean","Error","Promise","reject","logRequestError","ev","reqInt","interceptors","use","synchronous","resInt","attachStopCallback","_a","_b","_c","_d","eject","call","payload","isObject","thing"],"sources":["/Users/paramvirrotwal/Observability/website-admin-react-web-app-project/node_modules/@openreplay/tracker/lib/modules/axiosSpy.js"],"sourcesContent":["import { NetworkRequest } from '../app/messages.gen.js';\nimport { getTimeOrigin } from '../utils.js';\nimport { getExceptionMessage } from './exception.js';\nexport default function (app, instance, opts, sanitize, stringify) {\n    app.debug.log('Openreplay: attaching axios spy to instance', instance);\n    function captureResponseData(axiosResponseObj) {\n        app.debug.log('Openreplay: capturing axios response data', axiosResponseObj);\n        const { headers: reqHs, data: reqData, method, url, baseURL } = axiosResponseObj.config;\n        const { data: rData, headers: rHs, status: globStatus, response } = axiosResponseObj;\n        const { data: resData, headers: resHs, status: resStatus } = response || {};\n        const ihOpt = opts.ignoreHeaders;\n        const isHIgnoring = Array.isArray(ihOpt) ? (name) => ihOpt.includes(name) : () => ihOpt;\n        function writeHeader(hsObj, header) {\n            if (!isHIgnoring(header[0])) {\n                hsObj[header[0]] = header[1];\n            }\n        }\n        let requestHs = {};\n        let responseHs = {};\n        if (reqHs.toJSON) {\n            requestHs = reqHs.toJSON();\n        }\n        else if (reqHs instanceof Headers) {\n            reqHs.forEach((v, n) => writeHeader(requestHs, [n, v]));\n        }\n        else if (Array.isArray(reqHs)) {\n            reqHs.forEach((h) => writeHeader(requestHs, h));\n        }\n        else if (typeof reqHs === 'object') {\n            Object.entries(reqHs).forEach((h) => writeHeader(requestHs, h));\n        }\n        const usedResHeader = resHs ? resHs : rHs;\n        if (usedResHeader.toJSON) {\n            responseHs = usedResHeader.toJSON();\n        }\n        else if (usedResHeader instanceof Headers) {\n            usedResHeader.forEach((v, n) => writeHeader(responseHs, [n, v]));\n        }\n        else if (Array.isArray(usedResHeader)) {\n            usedResHeader.forEach((h) => writeHeader(responseHs, h));\n        }\n        else if (typeof usedResHeader === 'object') {\n            Object.entries(usedResHeader).forEach(([n, v]) => {\n                if (!isHIgnoring(n))\n                    responseHs[n] = v;\n            });\n        }\n        const reqResInfo = sanitize({\n            url,\n            method: method || '',\n            status: globStatus || resStatus || 0,\n            request: {\n                headers: requestHs,\n                body: reqData,\n            },\n            response: {\n                headers: responseHs,\n                body: resData || rData,\n            },\n        });\n        if (!reqResInfo) {\n            app.debug.log('Openreplay: empty request/response info, skipping');\n            return;\n        }\n        const requestStart = axiosResponseObj.config.__openreplay_timing;\n        const duration = performance.now() - requestStart;\n        app.debug.log('Openreplay: final req object', reqResInfo);\n        app.send(NetworkRequest('xhr', String(method), String(reqResInfo.url), stringify(reqResInfo.request), stringify(reqResInfo.response), reqResInfo.status, requestStart + getTimeOrigin(), duration, 0));\n    }\n    function getStartTime(config) {\n        app.debug.log('Openreplay: capturing API request', config);\n        config.__openreplay_timing = performance.now();\n        if (opts.sessionTokenHeader) {\n            const header = typeof opts.sessionTokenHeader === 'string'\n                ? opts.sessionTokenHeader\n                : 'X-OpenReplay-Session-Token';\n            const headerValue = app.getSessionToken();\n            if (headerValue) {\n                config.headers.set(header, headerValue);\n            }\n        }\n        return config;\n    }\n    function captureNetworkRequest(response) {\n        if (opts.failuresOnly)\n            return response;\n        captureResponseData(response);\n        return response;\n    }\n    function captureNetworkError(error) {\n        app.debug.log('Openreplay: capturing API request error', error);\n        if (isAxiosError(error) && Boolean(error.response)) {\n            captureResponseData(error.response);\n        }\n        else if (error instanceof Error) {\n            app.send(getExceptionMessage(error, []));\n        }\n        return Promise.reject(error);\n    }\n    function logRequestError(ev) {\n        app.debug.log('Openreplay: failed API request, skipping', ev);\n    }\n    const reqInt = instance.interceptors.request.use(getStartTime, logRequestError, {\n        synchronous: true,\n    });\n    const resInt = instance.interceptors.response.use(captureNetworkRequest, captureNetworkError, {\n        synchronous: true,\n    });\n    app.attachStopCallback(() => {\n        var _a, _b, _c, _d;\n        (_b = (_a = instance.interceptors.request).eject) === null || _b === void 0 ? void 0 : _b.call(_a, reqInt);\n        (_d = (_c = instance.interceptors.response).eject) === null || _d === void 0 ? void 0 : _d.call(_c, resInt);\n    });\n}\nfunction isAxiosError(payload) {\n    return isObject(payload) && payload.isAxiosError === true;\n}\nfunction isObject(thing) {\n    return thing !== null && typeof thing === 'object';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}