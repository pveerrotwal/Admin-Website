export declare const IN_BROWSER: boolean;
export declare const IS_FIREFOX: false | RegExpMatchArray | null;
export declare const MAX_STR_LEN = 100000;
export declare function adjustTimeOrigin(): void;
export declare function getTimeOrigin(): number;
export declare const now: () => number;
export declare const stars: (str: string) => string;
export declare function normSpaces(str: string): string;
export declare function isURL(s: string): boolean;
export declare const DOCS_HOST = "https://docs.openreplay.com";
export declare function deprecationWarn(nameOfFeature: string, useInstead: string, docsPath?: string): void;
export declare function getLabelAttribute(e: Element): string | null;
export declare function hasOpenreplayAttribute(e: Element, attr: string): boolean;
/**
 * checks if iframe is accessible
 **/
export declare function canAccessIframe(iframe: HTMLIFrameElement): boolean;
export declare function generateRandomId(len?: number): string;
export declare function inIframe(): boolean;
/**
 * Because angular devs decided that its a good idea to override a browser apis
 * we need to use this to achieve safe behavior
 * */
export declare function ngSafeBrowserMethod(method: string): string;
export declare function createMutationObserver(cb: MutationCallback): MutationObserver;
export declare function createEventListener(target: EventTarget, event: string, cb: EventListenerOrEventListenerObject, capture?: boolean): void;
export declare function deleteEventListener(target: EventTarget, event: string, cb: EventListenerOrEventListenerObject, capture?: boolean): void;
/**
 * This is a brief polyfill that suits our needs
 * I took inspiration from Microsoft Clarity polyfill on this one
 * then adapted it a little bit
 *
 * I'm very grateful for their bright idea
 * */
export declare function requestIdleCb(callback: () => void): number | undefined;
